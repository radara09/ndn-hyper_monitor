import { __importDefault, __importStar } from "tslib";
import _cjsDefaultImport0 from "minimalistic-assert"; const assert = __importDefault(_cjsDefaultImport0).default;
/** Yield all values from an iterable but catch any error. */
export async function* safeIter(iterable, onError) {
    try {
        yield* iterable;
    }
    catch (err) {
        onError?.(err);
    }
}
/**
 * Map and flatten once.
 * This differs from flatMap in streaming-iterables, which recursively flattens the result.
 */
export async function* flatMapOnce(f, iterable) {
    for await (const item of iterable) {
        yield* f(item);
    }
}
/** Delete keys from a Set or Map until its size is below capacity. */
export function evict(capacity, ct) {
    assert(capacity >= 0);
    for (const key of ct.keys()) {
        if (ct.size <= capacity) {
            break;
        }
        ct.delete(key);
    }
}
