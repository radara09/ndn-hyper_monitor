import { __importDefault, __importStar } from "tslib";
import _cjsDefaultImport0 from "minimalistic-assert"; const assert = __importDefault(_cjsDefaultImport0).default;
export function concatBuffers(list, totalLength) {
    totalLength ??= list.reduce((l, { byteLength }) => l + byteLength, 0);
    const c = new Uint8Array(totalLength);
    let offset = 0;
    for (const part of list) {
        c.set(part, offset);
        offset += part.byteLength;
    }
    assert.equal(offset, totalLength);
    return c;
}
export const console = globalThis.console;
export const crypto = globalThis.crypto;
if (!crypto.subtle && !globalThis.isSecureContext) {
    Object.defineProperty(crypto, "subtle", {
        configurable: true,
        get() {
            console.error("NDNts depends on Web Crypto but it is unavailable because this webpage is not delivered securely, " +
                "see https://mdn.io/SecureContext");
            return undefined;
        },
    });
}
export const CustomEvent = globalThis.CustomEvent;
export function delay(after, value) {
    return new Promise((resolve) => setTimeout(resolve, after, value));
}
export function timingSafeEqual(a, b) {
    // length has been checked by caller
    // https://codahale.com/a-lesson-in-timing-attacks/
    let result = 0;
    for (let i = 0; i < a.byteLength; ++i) {
        result |= a[i] ^ b[i];
    }
    return result === 0;
}
