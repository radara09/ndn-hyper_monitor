/** Yield all values from an iterable but catch any error. */
export declare function safeIter<T>(iterable: AsyncIterable<T>, onError?: (err?: unknown) => void): AsyncIterableIterator<T>;
/**
 * Map and flatten once.
 * This differs from flatMap in streaming-iterables, which recursively flattens the result.
 */
export declare function flatMapOnce<T, R>(f: (item: T) => Iterable<R> | AsyncIterable<R>, iterable: Iterable<T> | AsyncIterable<T>): AsyncIterable<R>;
/** Delete keys from a Set or Map until its size is below capacity. */
export declare function evict<K>(capacity: number, ct: evict.Container<K>): void;
export declare namespace evict {
    type Container<K> = Pick<Set<K>, "delete" | "size" | "keys">;
}
