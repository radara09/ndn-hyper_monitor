import { trackEventListener } from "@ndn/util";
import { TypedEventTarget } from "typescript-event-target";
import { FaceImpl } from "./face_node.js";
import { Fib } from "./fib_node.js";
import { Pit } from "./pit_node.js";
import { Readvertise } from "./readvertise_node.js";
export var Forwarder;
(function (Forwarder) {
    Forwarder.DefaultOptions = {
        dataNoTokenMatch: true,
    };
    /** Create a new forwarding plane. */
    function create(options) {
        return new ForwarderImpl({ ...Forwarder.DefaultOptions, ...options });
    }
    Forwarder.create = create;
    let defaultInstance;
    /** Access the default forwarding plane instance. */
    function getDefault() {
        if (!defaultInstance) {
            defaultInstance = Forwarder.create();
        }
        return defaultInstance;
    }
    Forwarder.getDefault = getDefault;
    /** Replace the default forwarding plane instance. */
    function replaceDefault(fw) {
        defaultInstance = fw;
    }
    Forwarder.replaceDefault = replaceDefault;
    /** Delete default instance (mainly for unit testing). */
    function deleteDefault() {
        if (!defaultInstance) {
            return;
        }
        defaultInstance.close();
        defaultInstance = undefined;
    }
    Forwarder.deleteDefault = deleteDefault;
    /** Face event. */
    class FaceEvent extends Event {
        face;
        constructor(type, face) {
            super(type);
            this.face = face;
        }
    }
    Forwarder.FaceEvent = FaceEvent;
    /** Prefix registration event. */
    class PrefixEvent extends Event {
        face;
        prefix;
        constructor(type, face, prefix) {
            super(type);
            this.face = face;
            this.prefix = prefix;
        }
    }
    Forwarder.PrefixEvent = PrefixEvent;
    /** Prefix announcement event. */
    class AnnouncementEvent extends Event {
        name;
        constructor(type, name) {
            super(type);
            this.name = name;
        }
    }
    Forwarder.AnnouncementEvent = AnnouncementEvent;
    /** Packet event. */
    class PacketEvent extends Event {
        face;
        packet;
        constructor(type, face, packet) {
            super(type);
            this.face = face;
            this.packet = packet;
        }
    }
    Forwarder.PacketEvent = PacketEvent;
})(Forwarder || (Forwarder = {}));
export class ForwarderImpl extends TypedEventTarget {
    opts;
    nodeNames = [];
    faces = new Set();
    fib = new Fib();
    pit;
    readvertise = new Readvertise(this);
    maybeHaveEventListener = trackEventListener(this);
    constructor(opts) {
        super();
        this.opts = opts;
        this.pit = new Pit(opts.dataNoTokenMatch);
    }
    addFace(face, attributes = {}) {
        return new FaceImpl(this, face, attributes);
    }
    pickInterestForwardingName(interest) {
        const fhName = interest.fwHint?.delegations[0];
        if (fhName && this.nodeNames.every((nodeName) => !fhName.isPrefixOf(nodeName))) {
            return fhName;
        }
        return interest.name;
    }
    /** Process incoming Interest. */
    processInterest(face, pkt) {
        const pi = this.pit.lookup(pkt);
        pi.receiveInterest(face, pkt);
        const fwName = this.pickInterestForwardingName(pkt.l3);
        for (const nh of this.fib.lookup(fwName)) {
            if (nh !== face) {
                pi.forwardInterest(nh);
            }
        }
    }
    /** Process incoming cancel Interest request. */
    cancelInterest(face, pkt) {
        const pi = this.pit.lookup(pkt, false);
        pi?.cancelInterest(face);
    }
    /** Process incoming Data. */
    processData(face, pkt) {
        void this.pit.satisfy(face, pkt);
    }
    /** Process incoming Nack. */
    processNack(face, nack) {
        // ignore Nack
        void face;
        void nack;
    }
    close() {
        this.pit.close();
        this.readvertise.close();
        for (const face of this.faces) {
            face.close();
        }
    }
    dispatchPacketEvent(type, face, pkt) {
        if (this.maybeHaveEventListener[type]) {
            this.dispatchTypedEvent(type, new Forwarder.PacketEvent(type, face, pkt));
        }
    }
}
